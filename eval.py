# eval.py

import numpy as np
import matplotlib.pyplot as plt

def compute_cumulative_rewards(rewards):
    cumulative_rewards = np.cumsum(rewards)
    return cumulative_rewards

def compute_average_rewards(rewards):
    average_rewards = np.mean(rewards)
    return average_rewards

def compute_std_rewards(rewards):
    std_dev_rewards = np.std(rewards)
    return std_dev_rewards

def compute_action_distribution(actions, n_arms):
    action_counts = np.zeros(n_arms)
    for action in actions:
        action_counts[action] += 1
    action_distribution = action_counts / len(actions)
    return action_distribution

def plot_rewards(rewards, title='Rewards over Iterations'):
    plt.figure(figsize=(12, 6))
    plt.plot(rewards, label='Rewards')
    plt.xlabel('Iterations')
    plt.ylabel('Reward')
    plt.title(title)
    plt.legend()
    plt.show()

def plot_cumulative_rewards(cumulative_rewards, title='Cumulative Rewards over Iterations'):
    plt.figure(figsize=(12, 6))
    plt.plot(cumulative_rewards, label='Cumulative Rewards', color='green')
    plt.xlabel('Iterations')
    plt.ylabel('Cumulative Reward')
    plt.title(title)
    plt.legend()
    plt.show()

def plot_action_distribution(action_distribution, n_arms):
    plt.figure(figsize=(12, 6))
    plt.bar(range(n_arms), action_distribution, color='orange', alpha=0.6)
    plt.xlabel('Arm')
    plt.ylabel('Proportion of Selection')
    plt.title('Action Distribution')
    plt.show()

def evaluate_model(rewards, actions, n_arms):
    # Compute metrics
    cumulative_rewards = compute_cumulative_rewards(rewards)
    avg_reward = compute_average_rewards(rewards)
    std_dev_rewards = compute_std_rewards(rewards)
    action_distribution = compute_action_distribution(actions, n_arms)
    
    # Display metrics
    print(f"Average Reward: {avg_reward:.4f}")
    print(f"Standard Deviation of Rewards: {std_dev_rewards:.4f}")
    print(f"Action Distribution: {action_distribution}")
    
    # Plot results
    plot_rewards(rewards)
    plot_cumulative_rewards(cumulative_rewards)
    plot_action_distribution(action_distribution, n_arms)

if __name__ == "__main__":
    # Example usage (assuming these arrays are generated by the simulation)
    example_rewards = np.random.normal(1, 0.5, 100)  # Simulated rewards
    example_actions = np.random.randint(0, 2, 100)  # Simulated actions (for 2 arms)
    n_arms = 2

    # Evaluate model performance
    evaluate_model(example_rewards, example_actions, n_arms)
